---
import { useEffect } from 'react'; // Importa useEffect si usas React en tu proyecto Astro
---

<style>
  .animate-width {
    transition: width 1s ease-in-out;
  }
  .count-up {
    transition: opacity 1s ease-in-out;
  }
</style>

<div class="px-4 sm:px-6 md:px-10 py-4" id="speed-comparison">
  <div class="relative rounded-md w-full bg-pink-300 shadow-md p-6">
    <h1 class="text-2xl font-bold text-black mb-4">Speed Comparison</h1>
    <p class="text-black mb-6">
      The following bars represent the speed comparison between Brew and our tool based on current development tests. Brew is currently at 97% speed, while our tool is at 93%. We are committed to improving performance and aim to increase the speed further before the final release.
    </p>
    <div class="space-y-4">
      <!-- Brew Speed -->
      <div class="flex items-center justify-between">
        <span class="font-medium text-black">Brew: <span id="brew-percentage" class="count-up">0%</span></span>
        <div class="w-full bg-gray-200 rounded-full h-4">
          <div
            id="brew-bar"
            class="bg-gradient-to-l from-fuchsia-500 via-pink-600 to-red-700 h-full rounded-full animate-width"
            style="width: 0%;"
            data-speed="97"
          ></div>
        </div>
      </div>

      <!-- Tool Speed -->
      <div class="flex items-center justify-between">
        <span class="font-medium text-black">Our Tool: <span id="tool-percentage" class="count-up">0%</span></span>
        <div class="w-full bg-gray-200 rounded-full h-4">
          <div
            id="tool-bar"
            class="bg-gradient-to-r from-red-500 via-amber-600 to-yellow-500 h-full rounded-full animate-width"
            style="width: 0%;"
            data-speed="93"
          ></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const speedComparisonSection = document.getElementById('speed-comparison');
      const bars = document.querySelectorAll('.animate-width');
      const percentages = document.querySelectorAll('.count-up');

      const updatePercentages = () => {
        bars.forEach(bar => {
          const speed = bar.getAttribute('data-speed');
          if (speed) {
            (bar as HTMLElement).style.width = `${speed}%`; // Use type assertion to avoid type error
          }
        });

        percentages.forEach(percentElem => {
          const barId = percentElem.id.replace('percentage', 'bar');
          const bar = document.getElementById(barId);
          const target = parseInt(bar?.getAttribute('data-speed') || '0', 10);
          let current = 0;
          const updateInterval = 20;
          const increment = target / (1000 / updateInterval); // Adjust based on animation duration

          const interval = setInterval(() => {
            if (current < target) {
              current = Math.min(current + increment, target);
              percentElem.textContent = `${Math.round(current)}%`;
            } else {
              percentElem.textContent = `${target}%`;
              clearInterval(interval);
            }
          }, updateInterval);
        });
      };

      // Intersection Observer to trigger animation when in view
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            updatePercentages();
            observer.unobserve(entry.target); // Stop observing after animation
          }
        });
      }, { threshold: 0.1 });

      if (speedComparisonSection) {
        observer.observe(speedComparisonSection);
      }
    });
  </script>
</div>
